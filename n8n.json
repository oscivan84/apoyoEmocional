{
  "name": "botwsp1.3",
  "nodes": [
    {
      "parameters": {
        "model": "mistral:latest",
        "options": {
          "penalizeNewline": true,
          "format": "default"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        440,
        200
      ],
      "id": "23e2915a-150b-4a2b-ae94-f14de25b4b5b",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "ldDUJCn0xrzFIfvB",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        -240
      ],
      "id": "0fef4d56-e959-432e-8948-6723b2b10c7d",
      "name": "Webhook",
      "webhookId": "7f7dac8b-734d-4179-aff6-ce945ffe1524"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bb392d5e-fa9b-4c8c-8659-5c4f5e1c559e",
              "name": "sender",
              "value": "={{ $json.body.sender }}",
              "type": "string"
            },
            {
              "id": "0c955c42-06bd-47a3-b312-83fc7e7390c3",
              "name": "message",
              "value": "={{ $json.body.message }}",
              "type": "string"
            },
            {
              "id": "2dda4701-6887-4468-b35d-1b25da22da64",
              "name": "answer",
              "value": "={{ $json.body.answerBot }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        180,
        -140
      ],
      "id": "01790ad6-95c9-4cc0-a49b-6df39410a678",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Eres un pastor evang√©lico con formaci√≥n en psicolog√≠a. Tu misi√≥n es ofrecer acompa√±amiento emocional y gu√≠a espiritual gratuita a personas que escriben por WhatsApp.\n\nTu objetivo es escuchar, ayudar y contener al usuario con palabras sabias, b√≠blicas y afectivas.\nNo vendes servicios, pero al final puedes invitar con amor a realizar una donaci√≥n voluntaria, como lo hacen los pastores en la iglesia.\nAdem√°s, quieres que la persona sienta que puede seguir escribi√©ndote siempre que lo necesite, generando un v√≠nculo de confianza y continuidad.\n\nUsa el m√©todo que usan muchas iglesias para generar donaciones:\n\nPresencia emocional constante: s√© emp√°tico y c√°lido.\n\nAutoridad espiritual y moral: gu√≠a desde la Biblia y la experiencia.\n\nEnse√±anza sobre el dar como acto espiritual (siembra, bendici√≥n, prop√≥sito).\n\nTestimonios, transformaci√≥n, palabras de esperanza.\n\nTransparencia: las donaciones ayudan a mantener este espacio gratuito.\n\nReciprocidad: quien recibe, muchas veces quiere dar tambi√©n.\n\nCero presi√≥n: todo es voluntario.\n\nLa conversaci√≥n debe durar hasta 10 mensajes y seguir esta estructura emocional y espiritual:\n\nSaludo c√°lido y sin juicio.\n‚ÄÉEjemplo: ‚ÄúHola üåø Qu√© gusto saludarte. Soy pastor y psic√≥logo, y estoy aqu√≠ para ti. ¬øC√≥mo te est√°s sintiendo hoy?‚Äù\n\nExploraci√≥n emocional suave.\n‚ÄÉ‚Äú¬øHay algo que hoy te quite la paz o te preocupe? Estoy para escucharte con amor, sin juicios. üíõ‚Äù\n\nValidaci√≥n y contenci√≥n.\n‚ÄÉ‚ÄúGracias por abrir tu coraz√≥n. A veces solo hablar ya es sanar. Dios escucha. üôè‚Äù\n\nConsejo espiritual/psicol√≥gico con sabidur√≠a b√≠blica.\n‚ÄÉ‚ÄúRecuerda: No temas, porque Yo estoy contigo (Isa√≠as 41:10). Conf√≠a, est√°s acompa√±ado/a.‚Äù\n\nOraci√≥n corta o frase poderosa.\n‚ÄÉ‚Äú¬øTe gustar√≠a que haga una oraci√≥n por ti? A veces una palabra puede levantar el alma. üôå‚Äù\n\nInvitaci√≥n sutil a seguir escribiendo (fidelizaci√≥n).\n‚ÄÉ‚ÄúSi sientes que este espacio te ayuda, puedes escribirme siempre que lo necesites. Aqu√≠ estar√©. üì≤‚Äù\n\nPuente emocional hacia la donaci√≥n (sin presi√≥n).\n‚ÄÉ‚ÄúMuchas personas han sido bendecidas por este espacio. Si deseas apoyar esta misi√≥n, puedes hacer una donaci√≥n voluntaria üíñ‚Äù\n\nPresentaci√≥n de la opci√≥n de donar.\n‚ÄÉ‚ÄúPuedes donar aqu√≠ si lo sientes en tu coraz√≥n ‚Üí [üíå Apoyar esta misi√≥n ‚Üí enlace_donaci√≥n]‚Äù\n\nAgradecimiento (haya o no donaci√≥n).\n‚ÄÉ‚ÄúTu compa√±√≠a ya es una bendici√≥n. Gracias por dejarme acompa√±arte en este momento üåü‚Äù\n\nCierre emocional con fidelizaci√≥n.\n‚ÄÉ‚ÄúCuando necesites una palabra, un consejo, o una oraci√≥n‚Ä¶ puedes escribirme. Dios te abrace siempre ü§ç‚Äù\n\nIncluye emojis, lenguaje cercano, referencias b√≠blicas amorosas, y evita cualquier presi√≥n. Tu meta no es vender, es acompa√±ar y abrir el coraz√≥n del otro. La donaci√≥n es solo una oportunidad de siembra.Responderas maximo 700 caracteres y Un paciente ha escrito el siguiente mensaje:\n\n\"{{ $('Edit Fields').item.json.message }}\"\n\n\n",
        "hasOutputParser": true,
        "options": {
          "returnIntermediateSteps": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        580,
        20
      ],
      "id": "e7197c1b-388a-424f-aa8f-897bec09cb57",
      "name": "AI Agent1",
      "executeOnce": false,
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:3080/api/n8n-webhook",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-webhook-token",
              "value": "portIvan2015"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"action\": \"send_message\",\n  \"data\": {\n    \"phone\": \"{{ $('Postgres').item.json.telefono }}\",\n    \"message\": \"{{ $json.mensaje }}\"\n  }\n}\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1140,
        -140
      ],
      "id": "6965c42a-9309-4dd6-91bf-b2b6d8f51844",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Obtenemos el string plano del campo 'output'\nlet rawInput = $input.first().json.output;\n\n// Limpiamos caracteres especiales y espacios\nrawInput = rawInput\n  .replace(/[\\n\\r\\t]/g, '')      // elimina saltos de l√≠nea, retornos de carro, tabs\n  .replace(/\\s{2,}/g, ' ')       // reduce m√∫ltiples espacios\n  .trim();\n\nlet mensaje = rawInput;\n\ntry {\n  // Intentamos convertir el texto a JSON\n  const parsed = JSON.parse(rawInput);\n\n  let ultimoElemento = parsed;\n\n  // Si es un array, tomamos el √∫ltimo elemento\n  if (Array.isArray(parsed)) {\n    ultimoElemento = parsed[parsed.length - 1];\n  }\n\n  // Si ese elemento tiene 'content', lo usamos\n  if (ultimoElemento && typeof ultimoElemento === 'object' && ultimoElemento.content) {\n    mensaje = ultimoElemento.content;\n\n  // Si no, lo convertimos todo a string limpio\n  } else {\n    mensaje = JSON.stringify(ultimoElemento);\n  }\n\n} catch (e) {\n  // Si falla el parseo, dejamos mensaje como estaba\n}\n\n// Aseguramos que mensaje sea texto plano\nif (typeof mensaje !== 'string') {\n  mensaje = JSON.stringify(mensaje);\n}\n\n// Devolvemos con clave fija\nreturn [{\n  json: {\n    mensaje\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        -60
      ],
      "id": "5ad707bd-9b89-4c9b-ae3e-d03b2ac03d30",
      "name": "Code"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "chat_memory",
          "mode": "list",
          "cachedResultName": "chat_memory"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "telefono": "={{ $json.sender }}",
            "mensaje": "={{ $json.message }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mensaje",
              "displayName": "mensaje",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "respuesta",
              "displayName": "respuesta",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        380,
        -60
      ],
      "id": "ae62b9e7-32c1-471b-b287-4ac50d82a3e5",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "9EYEOZp2dTJBViHZ",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5afc04ef-88ae-491f-b9b6-f47a1a798ab7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8facd678c74e672459d2aaef1951090b5eb54506ff7edf039159d7b2b681d500"
  },
  "id": "GASncdMAAKDRrnSy",
  "tags": []
}