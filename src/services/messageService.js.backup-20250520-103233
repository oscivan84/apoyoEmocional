// src/services/messageService.js
const { pool } = require('../config/database');

class MessageService {
    async saveMessage(numeroTelefono, mensaje, respuesta = null, estadoFlujo = null, idSesion = null) {
        console.log('\n?? Iniciando guardado de mensaje en BD');
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            console.log('?? Transacción iniciada');

            // Verificar si la tabla existe
            const tableCheck = await client.query(
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'interacciones'
                );
            );

            // Si la tabla no existe, crearla
            if (!tableCheck.rows[0].exists) {
                console.log('?? Creando tabla interacciones...');
                await client.query(
                    CREATE TABLE interacciones (
                        id SERIAL PRIMARY KEY,
                        numero_telefono VARCHAR(20) NOT NULL,
                        mensaje TEXT NOT NULL,
                        respuesta TEXT,
                        estado_flujo TEXT,
                        id_sesion VARCHAR(100),
                        tipo_mensaje VARCHAR(20) DEFAULT 'text',
                        fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                    );
                );
            }

            const query = 
                INSERT INTO interacciones (
                    numero_telefono, 
                    mensaje, 
                    respuesta, 
                    estado_flujo, 
                    id_sesion,
                    fecha_creacion
                )
                VALUES (, , , , , CURRENT_TIMESTAMP)
                RETURNING *;
            ;
            
            console.log('?? Ejecutando insert...');
            const result = await client.query(query, [
                numeroTelefono, 
                mensaje, 
                respuesta, 
                estadoFlujo,
                idSesion
            ]);
            
            await client.query('COMMIT');
            console.log('? Mensaje guardado exitosamente');
            
            return result.rows[0];
        } catch (error) {
            await client.query('ROLLBACK');
            console.error('? Error al guardar mensaje:', error);
            throw error;
        } finally {
            client.release();
        }
    }

    async updateMessageResponse(numeroTelefono, mensaje, respuesta) {
        console.log('\n?? Actualizando respuesta en BD');
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            const query = 
                UPDATE interacciones 
                SET respuesta = 
                WHERE numero_telefono =  AND mensaje = 
                RETURNING *;
            ;
            const result = await client.query(query, [numeroTelefono, mensaje, respuesta]);
            await client.query('COMMIT');
            console.log('? Respuesta actualizada exitosamente');
            return result.rows[0];
        } catch (error) {
            await client.query('ROLLBACK');
            console.error('? Error al actualizar respuesta:', error);
            throw error;
        } finally {
            client.release();
        }
    }
}

// Exportar una instancia de la clase
module.exports = new MessageService();
